Frequency map is empty when constructing a Huffman tree
----------------------
Testing test_string_to_frequence_map... Number of unique characters: 8
Frequency Map:
r: 1
e: 1
d: 1
o: 2
h: 1
w: 1
l: 3
 : 1
PASSED
----------------------
Testing test_huffman_tree... Huffman Tree:
      [left] Leaf: e (1)
    [left] Internal: (2)
      [right] Leaf: r (1)
  [left] Internal: (4)
      [left] Leaf: h (1)
    [right] Internal: (2)
      [right] Leaf: d (1)
Root: Internal: (11)
    [left] Leaf: l (3)
  [right] Internal: (7)
        [left] Leaf:   (1)
      [left] Internal: (2)
        [right] Leaf: w (1)
    [right] Internal: (4)
      [right] Leaf: o (2)
PASSED
----------------------
Testing test_huffman_tree_to_encoding_table... 
Encoding Table:
 : 1100
r: 001
h: 010
e: 000
o: 111
d: 011
w: 1101
l: 10
PASSED
----------------------
Testing test_huffman_encoder_and_decoder... Encoded bits: 
01000010101111100110111100110011
Decoded text: hello world
Original text: hello world
Decoded text matches original text: true
Original size: 88
Compressed size: 32
Compression ratio: 2.75
PASSED
----------------------
Testing test_huffman_encoder_single_character... Frequency Map:
a: 6
Huffman Tree:
Root: Leaf: a (6)
tree is built and printed
Encoding of the single character is empty. Set it to {false} (0)
encoder is  built
decoder is  built
Encoding of the single character is empty. Set it to {false} (0)

Encoding Table:
The number of items in the encoding table is: 1
a: 0
Calling the encode function of the Encoder
Encoded bits: 000000
Decoded text: aaaaaa
Original text: aaaaaa
Decoded text matches original text: true
PASSED
----------------------
Testing test_huffman_encoder_long_string... Original text: The quick brown fox jumps over the lazy dog. 1234567890
"To be, or not to be: that is the question" - Hamlet
Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
C++ programmers know that Huffman coding achieves optimal prefix coding!
Pack my box with five dozen liquor jugs. 
Bright vixens jump; dozy fowl quack. 
How razorback-jumping frogs can level six piqued gymnasts!
Sphinx of black quartz, judge my vow.
The five boxing wizards jump quickly. 
Jackdaws love my big sphinx of quartz.
Size of the text: 494
Frequency Map:
J: 1
S: 1
;: 1
B: 1
P: 1
!: 2
+: 2
l: 12
t: 21
v: 8
s: 18
p: 12
m: 16
j: 6
x: 8
f: 10
7: 1
n: 17
w: 8
H: 3
o: 31
q: 8
b: 8
3: 1
 : 76
e: 27
6: 1
u: 17
h: 11
9: 1
i: 29
:: 1
c: 14
4: 1
T: 3

: 9
k: 8
r: 18
C: 1
a: 22
2: 1
z: 7
y: 7
d: 11
5: 1
g: 13
8: 1
.: 7
1: 1
0: 1
": 2
,: 3
-: 2
L: 1
Huffman Tree:
          [left] Leaf: d (11)
        [left] Internal: (22)
          [right] Leaf: h (11)
      [left] Internal: (44)
        [right] Leaf: a (22)
    [left] Internal: (94)
          [left] Leaf: p (12)
        [left] Internal: (24)
          [right] Leaf: l (12)
      [right] Internal: (50)
            [left] Leaf: j (6)
          [left] Internal: (13)
            [right] Leaf: . (7)
        [right] Internal: (26)
          [right] Leaf: g (13)
  [left] Internal: (209)
        [left] Leaf: e (27)
      [left] Internal: (55)
            [left] Leaf: y (7)
          [left] Internal: (14)
            [right] Leaf: z (7)
        [right] Internal: (28)
          [right] Leaf: c (14)
    [right] Internal: (115)
        [left] Leaf: i (29)
      [right] Internal: (60)
        [right] Leaf: o (31)
Root: Internal: (494)
                [left] Leaf: " (2)
              [left] Internal: (4)
                [right] Leaf: + (2)
            [left] Internal: (8)
                  [left] Leaf: L (1)
                [left] Internal: (2)
                  [right] Leaf: 0 (1)
              [right] Internal: (4)
                [right] Leaf: - (2)
          [left] Internal: (16)
            [right] Leaf: k (8)
        [left] Internal: (32)
                  [left] Leaf: 7 (1)
                [left] Internal: (2)
                  [right] Leaf: P (1)
              [left] Internal: (4)
                  [left] Leaf: 6 (1)
                [right] Internal: (2)
                  [right] Leaf: 3 (1)
            [left] Internal: (8)
                  [left] Leaf: S (1)
                [left] Internal: (2)
                  [right] Leaf: J (1)
              [right] Internal: (4)
                  [left] Leaf: B (1)
                [right] Internal: (2)
                  [right] Leaf: ; (1)
          [right] Internal: (16)
                  [left] Leaf: 5 (1)
                [left] Internal: (2)
                  [right] Leaf: 2 (1)
              [left] Internal: (4)
                  [left] Leaf: 1 (1)
                [right] Internal: (2)
                  [right] Leaf: 8 (1)
            [right] Internal: (8)
                  [left] Leaf: : (1)
                [left] Internal: (2)
                  [right] Leaf: 9 (1)
              [right] Internal: (4)
                  [left] Leaf: C (1)
                [right] Internal: (2)
                  [right] Leaf: 4 (1)
      [left] Internal: (64)
            [left] Leaf: w (8)
          [left] Internal: (16)
            [right] Leaf: x (8)
        [right] Internal: (32)
            [left] Leaf: b (8)
          [right] Internal: (16)
            [right] Leaf: q (8)
    [left] Internal: (131)
          [left] Leaf: m (16)
        [left] Internal: (33)
            [left] Leaf: v (8)
          [right] Internal: (17)
            [right] Leaf: 
 (9)
      [right] Internal: (67)
          [left] Leaf: u (17)
        [right] Internal: (34)
          [right] Leaf: n (17)
  [right] Internal: (285)
      [left] Leaf:   (76)
    [right] Internal: (154)
          [left] Leaf: r (18)
        [left] Internal: (36)
          [right] Leaf: s (18)
      [right] Internal: (78)
            [left] Leaf: f (10)
          [left] Internal: (21)
                [left] Leaf: ! (2)
              [left] Internal: (5)
                [right] Leaf: , (3)
            [right] Internal: (11)
                [left] Leaf: T (3)
              [right] Internal: (6)
                [right] Leaf: H (3)
        [right] Internal: (42)
          [right] Leaf: t (21)
tree is built and printed

Encoding Table:
The number of items in the encoding table is: 54
t: 11111
H: 11110111
T: 11110110
,: 11110101
!: 11110100
f: 111100
s: 11101
-: 10000011
0: 100000101
o: 0111
i: 0110
:: 100011100
l: 00101
a: 0001
2: 100011001
+: 10000001
p: 00100
.: 001101
7: 100010000
e: 0100
6: 100010010
d: 00000
5: 100011000
L: 100000100
c: 01011
4: 100011111
z: 010101
h: 00001
9: 100011101
k: 100001

: 101011
j: 001100
;: 100010111
P: 100010001
": 10000000
g: 00111
8: 100011011
y: 010100
J: 100010101
3: 100010011
b: 100110
S: 100010100
B: 100010110
q: 100111
1: 100011010
C: 100011110
r: 11100
w: 100100
x: 100101
m: 10100
v: 101010
u: 10110
n: 10111
 : 110
encoder is  built
Calling the encode function of the Encoder
Encoded bits
Decoded text: The quick brown fox jumps over the lazy dog. 1234567890
"To be, or not to be: that is the question" - Hamlet
Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
C++ programmers know that Huffman coding achieves optimal prefix coding!
Pack my box with five dozen liquor jugs. 
Bright vixens jump; dozy fowl quack. 
How razorback-jumping frogs can level six piqued gymnasts!
Sphinx of black quartz, judge my vow.
The five boxing wizards jump quickly. 
Jackdaws love my big sphinx of quartz.
Original size: 3952
Compressed size: 2426
Compression ratio: 1.62902
PASSED

Test Results:
Total: 6
Passed: 6
Failed: 0
